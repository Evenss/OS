1.-pthread 会附加一个宏定义 -D_REENTRANT，该宏会导致 libc 头文件选择那些thread-safe的实现；
  链接选项中指定 -pthread 则同 -lpthread 一样，只表示链接 POSIX thread 库。
  由于 libc 用于适应 thread-safe 的宏定义可能变化，因此在编译和链接时都使用-pthread能够保持向后兼容，并提高命令行的一致性。

2. int sem_init (sem_t *sem, int pshared, unsigned int value);
	pshared不为0时其它进程就能够共享这个信号量，0表示它是当前进程的局部信号量；value给出了信号量的初始值。

   sem_post( sem_t *sem )增加信号量的值+1	(原子操作)让线程不再阻塞
	当有线程阻塞在这个信号量上时，调用这个函数会使其中的一个线程不在阻塞，选择机制同样是由线程的调度策略决定的
	成功时返回 0；错误时，信号量的值没有更改，-1 被返回，并设置 errno 来指明错误。

   sem_wait( sem_t *sem )-1	(原子操作)让阻塞当前线程
	用来阻塞当前线程直到信号量sem的值大于0，解除阻塞后将sem的值减一，表明公共资源经使用后减少。

3. int pthread_create();
	第一个参数为指向线程标识符的指针。
	第二个参数用来设置线程属性。
	第三个参数是线程运行函数的起始地址。
	最后一个参数是运行函数的参数。

   int pthread_join(pthread_t thread, void **retval);	等待一个线程的结束,线程间同步的操作。
	thread: 线程标识符，即线程ID，标识唯一线程。
   	retval: 用户定义的指针，用来存储被等待线程的返回值。

4. int msgget(key_t, key, int msgflg|IPC_CREAT);
	key非0在msgque向量表中找出键值为key的消息队列
   	该函数用来创建和访问一个消息队列，失败返回-1
   	msgflg表示消息队列的访问权限；IPC_CREAT表示当key所命名的消息队列不存在时创建一个消息队列，否则忽略。

   int msgsnd(int msgid, const void *msgp, size_t msgsz, int msgflg);	将一个新的消息写入队列
	msgp：指向消息缓冲区的指针，此位置用来暂时存储发送和接收的消息
	msgflg：这个参数依然是是控制函数行为的标志，
		0,表示忽略；
         	IPC_NOWAIT，如果消息队列为空，则返回一个ENOMSG，并将控制权交回调用函数的进程。
          	如果不指定这个参数，那么进程将被阻塞直到函数可以从队列中得到符合条件的消息为止。
          	如果一个client 正在等待消息的时候队列被删除，EIDRM 就会被返回。
          	如果进程在阻塞等待过程中收到了系统的中断信号，EINTR 就会被返回。
          	MSG_NOERROR，如果函数取得的消息长度大于msgsz，将只返回msgsz 长度的信息，剩下的部分被丢弃了。
          	如果不指定这个参数，E2BIG 将被返回，而消息则留在队列中不被取出。

   ssize_t msgrcv(int msgid, void *msgp, size_t msgsz, long msgtyp, int msgflg);	从消息队列中读取消息
	msgtyp等于0 则返回队列的最早的一个消息。
	msgtyp大于0，则返回其类型为mtype的第一个消息。
	msgtyp小于0,则返回其类型小于或等于mtype参数的绝对值的最小的一个消息。

   int msgctl (int msqid, int cmd, struct msqid_ds *buf)	删除消息队列
	msqid：为消息队列的qid
	cmd：为该函数要对消息队列执行的操作
		IPC_STAT：该命令用来获取消息队列信息，返回的信息存贮在buf指向的msqid结构中；
		IPC_SET：该命令用来设置消息队列的属性，要设置的属性存储在buf指向的msqid结构中；
		IPC_RMID：删除msqid标识的消息队列；
	buf：消息队列msqid_ds结构体指针

5. key_t 最后返回也是int

6. stdin 标准输入，从键盘输入到缓冲区里的东西
   stderr标准输出，输出到屏幕上

7. #ifndef BUFSIZ	//在stdio.h
    define BUFSIZ _IO_BUFSIZ
   #endif
   #define _IO_BUFSIZ _G_BUFSIZ 
   #define _G_BUFSIZ 8192

8. strncmp()
   首先将s1 第一个字符值减去s2 第一个字符值，若差值为0 则再继续比较下个字符，直到字符结束标志'\0'，若差值不为0，则将差值返回。

